agentless - no master slave mode , just controller and managed nodes
setup networks , db , set configuration
automate security with vault

Automating Linux Administration with Ansible
1.agentless
2.cross platform support(ssh & winrm)
3.human readable:yaml, plaintxt
4.easy to put in VCS
5.dynamic inventory: update inventory from outside or inside
6.Orchestration and Integration is easy 
7.From dev to prod all

Ansible i python developed and dependent rich plugins with module plugins,inventory plugins
connection plugins(ssh connection plugin)
become plugins ( work as user)
cache,lookup,vars,callback (more plugins)


Ansible engine -> ansible core 
ansible tower -> ansible automation platform (deprecated at RH older version)

ansible can be run by DNF in RHEL
cmd--sudo dnf install -y ansible 
weekest 
1. /etc.ansible.cfg -- you need to be root
2.~/.ansible.cfg -- override as per user 
//project directory
3../ansible.cfg
//strongest 
4.ANSIBLE_CONFIG= (SETTING UP VARIBALE)

Date: 03/11/2025
=====================
cfg file is used to apply settings for multiple ansible tools 
-It manages defaults and previlaged_escalations
//To generate default directives and configs 
ansible-config init --disabled > default_ansible.cfg
//to Dump or see them 
ansible-config dump 
example:
[defaults]

inventory = ./inventory #list of hosts

remote_user = user #user on managed nodes

ask_pass = false # no prompt for password

[privilege_escalation]

become = true #auto switch user

become_method = sudo 

become_user = root

become_ask_pass = false # ask password for become param

ex : 2 
inventory = ./myInventory/
remote_user:devops
collection_pathc=./collections/
=====================
Inventory : Manage hosts from diff sourses(satelite dir from RHEl. ms active directory ,etc.)
-ansible controlller can dynamically use by using plugins 

vi /.myinventory/inventory.ini
[webservers]
servera
/erverb/
[dbservers]
serverc 
serverd
[rhel9]
server[a:d]
[rhel:children]
rhel8
rhel9

cmd - ansible-inventory -i <.ini file> --graph // to show the structure 
cmd - ansible-inventory -i invetory.ini --list // in list
Nested Groups: // here usa & canada are children for north-america, so suffixed with :childeren
[usa]

washington1.example.com

washington2.example.com

[canada]

ontario01.example.com

ontario02.example.com

[north-america:children]

canada

usa
==================
=========
yaml playbooks : have many plays in one playbook with modules
 play1:
	tasks:
		task1:
		task2: ---> modules for appservers
 play2:
	tasks:
		task1:
		task2: ---> modules for webservers
EXAMPLE: 
---
- name: Configure important user consistently
  hosts: servera.lab.example.com
  tasks:
    - name: Newbie exists with UID 4000
      ansible.builtin.user:
        name: newbie
        uid: 4000
        state: present
...
=========
YAML - YAML ain't a  markup language(human readable serializable language)
it supports key value pairs name : install httpd(no qutes required)
indentation is important
-dictionary:
  -name:yash
   email:yash@gmail.com
cmd --syntax-check //for checking playbook syntax
Imp: host key is play level not task level //better to use a editor
===========
Modue 4: Variables 
  -must begin with alphabet
  -there are 22 diff ways to use or keep variables(keep it simple)
  methods:
    - first_way: /role/defaults/
      second_way: /inventory/roup-_vars/<varsFile.yaml>

Variable Precedence 
https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#understanding-variable-precedence

create vars at play level , group_vars folder,task level ,set_facts
vars_file:
  - myvars.yaml //variablees should be in the same playbook folder


print_plabook.yaml
---
- name: Printing my name
  hosts: localhost
  connection: local

  vars_files:
    - my_vars.yaml

  tasks:
    - name: Printing name task
      ansible.builtin.debug:
        msg: "Hi {{ my_string }} "

example for set_fascts :higher precedence overides all 
- name: ensure fact_controller learns about my vars
  ansible.builtin.set_fact:
    my_string: white //overides and sets my_string
example of win precedence - wins always:
// -e "user-my_user"

cmd ansible-plabook first.yaml -e my_string=Yashwanth -i inventory.ini


project
├── ansible.cfg
├── group_vars
│   ├── datacenters
│   ├── datacenters1
│   └── datacenters2
├── host_vars
│   ├── demo1.example.com
│   ├── demo2.example.com
│   ├── demo3.example.com
│   └── demo4.example.com
├── inventory
└── playbook.yml
==============
**Module 5**
*RHEL System Roles*:linux-system-roles.vpn
				    .firewall
				    .timesync
				    .sshd
				    .certificate
				    .storage etc.
-usr/shares/ansible-roles //default location 
 -System roles provide automation for many common system configuration tasks, including time synchronization, networking, firewall, tuning, and logging.
 -https://access.redhat.com/articles/3050101
 -use install -p by ansible galaxy
===========
*Automating with Modules*: rich module collections with plugins
- A collection is combination of plugins,modules and roles.
- Ansible Galaxy used to import and export the collections
- Core-Set of collection // ex: ansible-galaxy collection install ansible.posix 
	-ansible.builtin.dnf:
	-ansible.posix.firewalld:
	-ansible.builtin.copy:
	--ansible.builtin.debug:
cmd ansible-galaxy collection list // gives installed collections
cmd ansible-doc -l //modules installed and its discriptions
cmd ansible-doc copy //details of module	












